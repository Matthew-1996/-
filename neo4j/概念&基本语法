# 知识图谱概念的简单介绍
- 标签：类，可以给实体分类。neo4j下，同一类实体会有同一种颜色。入门时，可以理解为sql中的表，方便理解。
  - 并且，关系也是可以有标签（类）的，叫关系标签
- 实体：具体的一个节点，节点可以有很多属性。入门时，可以理解为sql中的一行，方便理解。
- 关系：实体和实体间的关系。关系也可以有很多属性（不是指关系名）。要注意，关系也是可以分类的（标签）

# neo4j的语法
基础的就是增删查改，再加一些简单的where、order by等  

首先，在这些之前，cql（Cypher查询语言）底层的语法逻辑：
- ()，左右括号代表一个实体
- <-[]->，--和大于小于，表示关系，关系的名称用[ ]框起来
- {key:value}，不管是实体还是关系，属性的表示是一样的，大括号框起来的键值对。放在( )和[ ]里面。
- : ，冒号除了在键值对中做分隔以外，其他时候是和标签（类）一起出现的
  - 节点:标签
  - 关系:关系标签
  - 节点/关系:标签:标签
  - 总之，标签在冒号右边


基于以上规则，我们可以试着写一个完整的实体──关系──实体的语法表达
```cql
(实体:标签1:标签2{属性键值对,属性键值对})<-[关系:标签1:标签2{属性键值对,属性键值对}]->(实体:标签1:标签2{属性键值对,属性键值对})
```
## 创建
创建就是CREATE，至于创建什么（实体、条件）其实就看后面怎么写，先不叠加

```cql
CREATE (实体名:标签名)
CREATE (dept:Dept{deptno:10,dname:"Accounting",location:"Hyderabad"})

CREATE (m:Movie:Cinema:Film:Picture)   ---一个实体创建多个标签

CREATE (实体名:标签名)-[关系名:关系标签)]->(实体名:标签名)
CREATE (p1:Profile1)-[r1:LIKES]->(p2:Profile2)
```

## 匹配match
match匹配相关的节点、关系、和属性  

但它不能单独使用，匹配完了之后，还需要return，来表明需要展示什么（类似select）  

其他使用规则依然和上面的create类似
```cql
match (p:label {id:123,name:"abc"})
return p
# 在match中限定实体，是键值对，所以是:限定

match (p:label)
where p.name = "abc"
return p
# 先match某类标签后，限定属性，因为是where限定，所以用等号

# 而且这里值得注意的是，match不仅能查询某个具体的节点。
# 就像这里的p可以是一个类似未知数的概念，查询所有name是abc的节点
```

## return
return后面的格式是 节点/关系.属性  
既可以是具体的节点/关系，也可以是未知数（批量）  

必须跟match或者create一起使用